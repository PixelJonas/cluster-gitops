apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: homeassistant-db
  namespace: argocd-operator-system
  annotations:
    argocd.argoproj.io/sync-wave: "111"
spec:
  destination:
    namespace: homeassistant-db
    server: https://kubernetes.default.svc
  project: cluster-config
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: postgresql
    targetRevision: 11.8.1
    helm:
      values: |-

        commonLabels:
          snapshot.pmb/enabled: "true"
          snapshot.pmb/postgres-controller-name: "homeassistant-db-postgresql"
          snapshot.pmb/postgres-controller-type: "sts"

        global:
          storageClass: openebs-jiva-csi-default
          postgresql:
            auth:
              username: homeassistant
              existingSecret: homeassistant-db-postgresql
              database: homeassistant
        primary:
          service:
            type: NodePort
            nodePorts:
              postgresql: 30310
          annotations: 
            kanister.kasten.io/blueprint: postgres-bp
          labels:
            kanister.kasten.io/inject-sidecar: "true"
          # extraVolumes:
          #   - name: backup
          #     persistentVolumeClaim:
          #       claimName: pvc-homeassistant-db-backup
          # sidecars:
          #   - name: pmb-backup-cron
          #     image: quay.io/jjanz/pmb:latest
          #     imagePullPolicy: Always
          #     securityContext:
          #       privileged: true
          #     command:
          #       - /bin/bash
          #       - -c
          #       - |-
          #         printf "\e[1;32m%-6s\e[m\n" "Starting PMB Loop-Script ..."
          #         printf "\e[1;32m%-6s\e[m\n" "Waiting 2minutes for everything to be up and running ..."
          #         sleep 2h
          #         printf "\e[1;32m%-6s\e[m\n" "Entering while loop ..."
          #         BACKUP_SUCCESS=1
          #         while [ $BACKUP_SUCCESS -eq 1 ]; do
          #           printf "\e[1;32m%-6s\e[m\n" "Starting backup at $(date) ..."

          #           /entrypoint.sh
          #           BACKUP_EXIT=$?
          #           printf "\e[1;32m%-6s\e[m\n" "finished backup with $BACKUP_EXIT ..."
          #           if [ $BACKUP_EXIT -ne 0 ]; then
          #             printf "\e[1;32m%-6s\e[m\n" "failed backup exiting ..."
          #             BACKUP_SUCCESS=0
          #           else
          #             printf "\e[1;32m%-6s\e[m\n" "backup was successfull waiting 24h for next backup ..."
          #             sleep 24h
          #           fi
          #         done
              
          #     env:
          #       - name: KOPIA_PASSWORD
          #         valueFrom:
          #           secretKeyRef:
          #             name: kopia
          #             key: kopia_password
          #       - name: PMB__DEBUG
          #         value: "true"
          #       - name: PMB__FSFREEZE
          #         value: "false"
          #     volumeMounts:
          #       - name: data
          #         mountPath: /data/src
          #       - name: backup
          #         mountPath: /data/dest

  ignoreDifferences:
    - group: "apps"
      kind: "StatefulSet"
      jsonPointers:
        - /spec/replicas

  syncPolicy:
    syncOptions:
      - RespectIgnoreDifferences=true
      - CreateNamespace=true
