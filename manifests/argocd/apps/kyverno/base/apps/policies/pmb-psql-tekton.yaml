---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pmb-psql-backup-cronjob-controller
  annotations:
    policies.kyverno.io/title: PMB PostgreSQL Tekton CronJob controller
    policies.kyverno.io/subject: PersistentVolumeClaim
    policies.kyverno.io/description: |
      This policy creates a PMB Postgresql snapshot CronJob for labeled PersistentVolumeClaims

      The following labels on PVCs with their respective labels are required for this to run:
        - snapshot.pmb/enabled
        - snapshot.pmb/postgres-controller-name
        - snapshot.pmb/postgres-controller-type
        - app.kubernetes.io/name
        - app.kubernetes.io/instance

      The labels of "snapshot.pmb/postgres-controller-name" and "snapshot.pmb/postgres-controller-type"  must be set to a controller
      running a postgresql database which will be part of the backup. 
      example:
          "snapshot.pmb/postgres-controller-name=myapp-postgresql"
          "snapshot.pmb/postgres-controller-type=sts"

      There should also be a secret called kopia in the namespace this CronJob is executed. It needs to contain the following keys:
        - kopia_password

spec:
  generateExistingOnPolicyUpdate: true
  mutateExistingOnPolicyUpdate: true
  rules:
    - name: create-pmb-destination-pvc
      match:
        any:
          - resources:
              kinds:
                - PersistentVolumeClaim
              selector:
                matchLabels:
                  snapshot.pmb/enabled: "true"
                  snapshot.pmb/postgres-controller-name: "*"
                  snapshot.pmb/postgres-controller-type: "*"
                  app.kubernetes.io/name: "*"
                  app.kubernetes.io/instance: "*"
      context:
        - name: appName
          variable:
            jmesPath: 'request.object.metadata.labels."app.kubernetes.io/name"'
        - name: claimName
          variable:
            jmesPath: "request.object.metadata.name"
        - name: namespace
          variable:
            jmesPath: "request.object.metadata.namespace"
        - name: size
          variable:
            jmesPath: "request.object.spec.resources.requests.storage"
      generate:
        apiVersion: v1
        kind: PersistentVolumeClaim
        name: "{{ claimName }}-psql-backup"
        namespace: "{{ namespace }}"
        data:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: "{{ size }}"
            storageClassName: pmb-backup
            volumeMode: Filesystem
    - name: create-pmb-tmp-pvc
      match:
        any:
          - resources:
              kinds:
                - PersistentVolumeClaim
              selector:
                matchLabels:
                  snapshot.pmb/enabled: "true"
                  snapshot.pmb/postgres-controller-name: "*"
                  snapshot.pmb/postgres-controller-type: "*"
                  app.kubernetes.io/name: "*"
                  app.kubernetes.io/instance: "*"
      context:
        - name: appName
          variable:
            jmesPath: 'request.object.metadata.labels."app.kubernetes.io/name"'
        - name: claimName
          variable:
            jmesPath: "request.object.metadata.name"
        - name: namespace
          variable:
            jmesPath: "request.object.metadata.namespace"
        - name: size
          variable:
            jmesPath: "request.object.spec.resources.requests.storage"
      generate:
        apiVersion: v1
        kind: PersistentVolumeClaim
        name: "{{ claimName }}-psql-tmp"
        namespace: "{{ namespace }}"
        data:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: "{{ size }}"
            storageClassName: pmb-backup
            volumeMode: Filesystem
    - name: create-pmb-cronjob
      match:
        any:
          - resources:
              kinds:
                - PersistentVolumeClaim
              selector:
                matchLabels:
                  snapshot.pmb/enabled: "true"
                  snapshot.pmb/postgres-controller-name: "*"
                  snapshot.pmb/postgres-controller-type: "*"
                  app.kubernetes.io/name: "*"
                  app.kubernetes.io/instance: "*"
      context:
        - name: appName
          variable:
            jmesPath: 'request.object.metadata.labels."app.kubernetes.io/name"'
        - name: claimName
          variable:
            jmesPath: "request.object.metadata.name"
        - name: namespace
          variable:
            jmesPath: "request.object.metadata.namespace"
        - name: postgresControllerName
          variable:
            default: ""
            jmesPath: 'request.object.metadata.labels."snapshot.pmb/postgres-controller-name"'
        - name: postgresControllerType
          variable:
            default: ""
            jmesPath: 'request.object.metadata.labels."snapshot.pmb/postgres-controller-type"'
      generate:
        synchronize: true
        apiVersion: batch/v1
        kind: CronJob
        name: "{{ claimName }}-psql-pmb"
        namespace: "{{ request.object.metadata.namespace }}"
        data:
          metadata:
            labels:
              app.kubernetes.io/name: '{{ request.object.metadata.labels."app.kubernetes.io/name" }}'
              app.kubernetes.io/instance: '{{ request.object.metadata.labels."app.kubernetes.io/instance" }}'
            ownerReferences:
              - apiVersion: "{{ request.object.apiVersion }}"
                kind: "{{ request.object.kind }}"
                name: "{{ request.object.metadata.name }}"
                uid: "{{ request.object.metadata.uid }}"
          spec:
            schedule: "0 3 * * *"
            suspend: false
            concurrencyPolicy: Forbid
            successfulJobsHistoryLimit: 1
            failedJobsHistoryLimit: 2
            jobTemplate:
              spec:
                # Keep at least one job in completed state in accordance to the schedule
                ttlSecondsAfterFinished: 86400
                template:
                  spec:
                    automountServiceAccountToken: false
                    restartPolicy: OnFailure
                    containers:
                      - name: pmb-cron
                        image: registry.access.redhat.com/ubi8/ubi-minimal
                        env:
                          - name: KOPIA_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                key: kopia_password
                                name: kopia
                        command:
                          - /bin/bash
                          - -c
                          - |-
                            printf "\e[1;32m%-6s\e[m\n" "Pinging pmb-tekton to run backup"
                            curl -X POST \
                              -d "{\"namespace\": \"{{ namespace }}\", \"kopia_repo_pvc\": \"{{ claimName }}-psql-backup\", \"source_pvc\": \"{{ claimName }}-psql-tmp\", \"postgres_controller\": \"{{ postgresControllerType }}/{{ postgresControllerName }}\" ,\"kopia_password\": \"$KOPIA_PASSWORD\"}" http://el-pmb-kopia-sync-listener.pmb-backup.svc.cluster.local:8080
