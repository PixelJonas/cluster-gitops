---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: pmb-backup-cronjob-controller
  annotations:
    policies.kyverno.io/title: PMB Tekton CronJob controller
    policies.kyverno.io/subject: PersistentVolumeClaim
    policies.kyverno.io/description: |
      This policy creates a PMB snapshot CronJob for labeled PersistentVolumeClaims

      The following labels on PVCs with their respective labels are required for this to run:
        - snapshot.pmb/enabled
        - app.kubernetes.io/name
        - app.kubernetes.io/instance

      An optional label of "snapshot.pmb/ignoreAffinity" may be set on the PVC
      if the pod is guaranteed to not run during the time of this jobs execution

      An optional label of "snapshot.pmb/postgres-controller-name" and "snapshot.pmb/postgres-controller-type"  may be set to a controller
      running a postgresql database which be part of the backup. 
      example:
          "snapshot.pmb/postgres-controller-name=myapp-postgresql"
          "snapshot.pmb/postgres-controller-type=sts"
spec:
  generateExistingOnPolicyUpdate: true
  mutateExistingOnPolicyUpdate: true
  rules:
    - name: create-pmb-destination-pvc
      match:
        any:
          - resources:
              kinds:
                - PersistentVolumeClaim
              selector:
                matchLabels:
                  snapshot.pmb/enabled: "true"
                  app.kubernetes.io/name: "*"
                  app.kubernetes.io/instance: "*"
      context:
        - name: appName
          variable:
            jmesPath: 'request.object.metadata.labels."app.kubernetes.io/name"'
        - name: claimName
          variable:
            jmesPath: "request.object.metadata.name"
        - name: namespace
          variable:
            jmesPath: "request.object.metadata.namespace"
        - name: size
          variable:
            jmesPath: "request.object.spec.resources.requests.storage"
      generate:
        apiVersion: v1
        kind: PersistentVolumeClaim
        name: "{{ claimName }}-backup"
        namespace: "{{ namespace }}"
        data:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: "{{ size }}"
            storageClassName: pmb-backup
            volumeMode: Filesystem
    - name: create-pmb-cronjob
      match:
        any:
          - resources:
              kinds:
                - PersistentVolumeClaim
              selector:
                matchLabels:
                  snapshot.pmb/enabled: "true"
                  app.kubernetes.io/name: "*"
                  app.kubernetes.io/instance: "*"
      context:
        - name: appName
          variable:
            jmesPath: 'request.object.metadata.labels."app.kubernetes.io/name"'
        - name: claimName
          variable:
            jmesPath: "request.object.metadata.name"
        - name: namespace
          variable:
            jmesPath: "request.object.metadata.namespace"
        - name: postgresControllerName
          default: ""
          variable:
            jmesPath: 'request.object.metadata.labels."snapshot.pmb/postgres-controller-name"'
        - name: postgresControllerType
          default: ""
          variable:
            jmesPath: 'request.object.metadata.labels."snapshot.pmb/postgres-controller-type"'
        - name: nodeAffinity
          variable:
            value:
              ignored: '{{ (request.object.metadata.labels."snapshot.pmb/ignoreAffinity" || ''false'') == ''false'' }}'
              labels:
                - key: app.kubernetes.io/name
                  operator: "In"
                  values:
                    - '{{ request.object.metadata.labels."app.kubernetes.io/name" }}'
                - key: app.kubernetes.io/instance
                  operator: "In"
                  values:
                    - '{{ request.object.metadata.labels."app.kubernetes.io/instance" }}'
      generate:
        synchronize: true
        apiVersion: batch/v1
        kind: CronJob
        name: "{{ claimName }}-pmb"
        namespace: "{{ request.object.metadata.namespace }}"
        data:
          metadata:
            labels:
              app.kubernetes.io/name: '{{ request.object.metadata.labels."app.kubernetes.io/name" }}'
              app.kubernetes.io/instance: '{{ request.object.metadata.labels."app.kubernetes.io/instance" }}'
            ownerReferences:
              - apiVersion: "{{ request.object.apiVersion }}"
                kind: "{{ request.object.kind }}"
                name: "{{ request.object.metadata.name }}"
                uid: "{{ request.object.metadata.uid }}"
          spec:
            schedule: "0 3 * * *"
            suspend: false
            concurrencyPolicy: Forbid
            successfulJobsHistoryLimit: 1
            failedJobsHistoryLimit: 2
            jobTemplate:
              spec:
                # Keep at least one job in completed state in accordance to the schedule
                ttlSecondsAfterFinished: 86400
                template:
                  spec:
                    automountServiceAccountToken: false
                    restartPolicy: OnFailure
                    containers:
                      - name: pmb-cron
                        image: registry.access.redhat.com/ubi8/ubi-minimal
                        env:
                          - name: KOPIA_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                key: kopia_password
                                name: kopia
                        command:
                          - /bin/bash
                          - -c
                          - |-
                            printf "\e[1;32m%-6s\e[m\n" "Pinging pmb-tekton to run backup"
                            curl -X POST \
                              -d '{"namespace": "{{ namespace }}", "destination-pvc": "{{ claimName }}-backup", "source-pvc": "{{ claimName }}", "postgres-controller": "{{ postgresControllerType }}/{{ postgresControllerName }}" ,"kopia_password": "$KOPIA_PASSWORD"}' http://el-pmb-listener.pmb-backup.svc.cluster.local:8080
                    affinity:
                      podAffinity:
                        requiredDuringSchedulingIgnoredDuringExecution:
                          - topologyKey: kubernetes.io/hostname
                            labelSelector:
                              matchExpressions: "{{ nodeAffinity.ignored && [] || nodeAffinity.labels }}"
