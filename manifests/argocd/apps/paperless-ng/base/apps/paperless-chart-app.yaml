apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: paperless-ng
  namespace: argocd-operator-system
  annotations:
    argocd.argoproj.io/sync-wave: "111"
spec:
  destination:
    namespace: paperless
    server: "https://kubernetes.default.svc"
  source:
    chart: app-template
    repoURL: https://bjw-s.github.io/helm-charts
    targetRevision: 1.0.1
    helm:
      values: |-

        image:
          repository: ghcr.io/paperless-ngx/paperless-ngx
          tag: 1.10.1
          pullPolicy: IfNotPresent


        secrets:
          custom-scripts:
            enabled: true
            stringData:
              docker-entrypoint.sh: |-
                #!/usr/bin/env bash

                set -e

                install_packages() {
                  echo "Installing packages..."

                  local packages="$1"
                  read -ra packages <<<"$packages"

                  # Check that it is not empty
                  if [ ${#packages[@]} -eq 0 ]; then
                    return
                  fi
                  apt-get update

                  for package in "${packages[@]}"; do
                    pkg="$package"

                    if dpkg -s "$pkg" &>/dev/null; then
                      echo "Package $pkg already installed!"
                      continue
                    fi

                    if ! apt-cache show "$pkg" &>/dev/null; then
                      echo "Package $pkg not found! :("
                      continue
                    fi

                    echo "Installing package $pkg..."
                    if ! apt-get -y install "$pkg" &>/dev/null; then
                      echo "Could not install $pkg"
                      exit 1
                    fi
                  done
                }

                # Install additional packages if specified
                if [[ -n "$PAPERLESS_CUSTOM_PACKAGES" ]]; then
                  install_packages "$PAPERLESS_CUSTOM_PACKAGES"
                fi

                exec "/sbin/docker-entrypoint.sh" "/usr/local/bin/paperless_cmd.sh"

              pdf_rm_blank.sh: |-
                #!/usr/bin/env bash

                DOCUMENT_FILE_NAME=${1}

                echo "
                Document ${DOCUMENT_ID} was just consumed.
                "

                IN="$DOCUMENT_FILE_NAME"
                OUT="${DOCUMENT_FILE_NAME}_tmp"
                PAGES=$(pdfinfo "$IN" | grep ^Pages: | tr -dc '0-9')
                echo "Starting to remove blank pages from $IN"
                non_blank() {
                    for i in $(seq 1 $PAGES)
                    do
                        if [ $(convert -density 25 "$IN[$((i-1))]" -define histogram:unique-colors=true -format %c histogram:info:- | wc -l) -gt 25 ]
                        then
                            echo $i
                            #echo $i 1>&2
                        fi
                        echo -n . 1>&2
                    done | tee out.tmp
                    echo 1>&2
                }

                set +x
                pdftk "$IN" cat $(non_blank) output "$OUT"
                rm out.tmp
                mv "$OUT" "$IN"
                echo "finishing removing blank pages from $IN"

        env:
          # -- Project name
          COMPOSE_PROJECT_NAME: paperless
          # -- Redis to use
          PAPERLESS_REDIS: redis://localhost:6379
          PAPERLESS_CSRF_TRUSTED_ORIGINS: "https://paperless.apps.titan.janz.digital,https://paperless.janz.digital"
          PAPERLESS_ALLOWED_HOSTS: "paperless.apps.titan.janz.digital,paperless.janz.digital,localhost"
          PAPERLESS_CORS_ALLOWED_HOSTS: "https://paperless.apps.titan.janz.digital,https://paperless.janz.digital"
          
          # -- OCR languages to install
          PAPERLESS_OCR_LANGUAGE: deu
          PAPERLESS_OCR_LANGUAGES: deu
          PAPERLESS_CUSTOM_PACKAGES: "pdftk poppler-utils"
          PAPERLESS_TIME_ZONE: Europe/Berlin
          PAPERLESS_CONSUMER_POLLING: 30
          PAPERLESS_OCR_DESKEW: true
          PAPERLESS_TIKA_ENABLED: 1
          PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://localhost:3000
          PAPERLESS_TIKA_ENDPOINT: http://localhost:9998
          PAPERLESS_PRE_CONSUME_SCRIPT: /usr/src/paperless/custom-scripts/pdf_rm_blank.sh
          PAPERLESS_ENABLE_HTTP_REMOTE_USER: "true"
          PAPERLESS_HTTP_REMOTE_USER_HEADER_NAME: "HTTP_X_AUTH_REQUEST_PREFERRED_USERNAME"
          PAPERLESS_DBHOST: "paperless-db-postgresql"
          PAPERLESS_DBPORT: "5432"
          PAPERLESS_DBUSER: "paperless"
          PAPERLESS_DBPASS:
            valueFrom:
              secretKeyRef:
                name: paperless-db-postgresql
                key: password


        command: "/usr/src/paperless/custom-scripts/docker-entrypoint.sh"
        args: ["/usr/local/bin/supervisord", "-c", "/etc/supervisord.conf"]

        podSecurityContext:
          runAsUser: 0
          runAsGroup: 0

        service:
          main:
            ports:
              http:
                port: 8000

        ingress:
          main:
            annotations:
              nginx.ingress.kubernetes.io/proxy-body-size: 50m
            enabled: true
            ingressClassName: nginx
            pathType: Prefix
            hosts:
              - host: paperless.apps.hive.janz.digital
                paths:
                  - path: /
                    pathType: Prefix
            tls:
              - hosts:
                  - paperless.apps.hive.janz.digital

        persistence:
          data:
            enabled: true
            mountPath: /usr/src/paperless/data
            accessMode: ReadWriteOnce
            storageClass: openebs-jiva-csi-default
            size: 3Gi
          media:
            enabled: true
            mountPath: /usr/src/paperless/media
            accessMode: ReadWriteOnce            
            storageClass: openebs-jiva-csi-default
            size: 10Gi
            labels:
              "snapshot.pmb/enabled": "true"
          export:
            enabled: true       
            mountPath: /usr/src/paperless/export
            accessMode: ReadWriteOnce
            size: 1Gi
          consume:
            enabled: false
            mountPath: /usr/src/paperless/consume
            accessMode: ReadWriteOnce
          custom-scripts:
            name: paperless-ng-custom-scripts
            enabled: true
            type: secret
            defaultMode: 0777
            mountPath: /usr/src/paperless/custom-scripts

        additionalContainers:
          broker:
            name: broker
            image: redis:6.0
            imagePullPolicy: IfNotPresent
          tika:
            name: tika
            image: docker.io/apache/tika:2.3.0
            imagePullPolicy: IfNotPresent
          gotenberg:
            name: gotenberg
            image: docker.io/gotenberg/gotenberg:7
            env:
              - name: CHROMIUM_DISABLE_ROUTES
                value: "1"

        probes:
          startup:
            custom: true
            enabled: true
            spec:
              failureThreshold: 30
              initialDelaySeconds: 20
              periodSeconds: 5
              tcpSocket:
                port: 8000
              timeoutSeconds: 1
          liveness:
            custom: true
            enabled: true
            spec:
              failureThreshold: 30
              initialDelaySeconds: 0
              periodSeconds: 5
              exec:
                command:
                  - /bin/bash
                  - "-c"
                  - echo "Healthy" > /usr/src/paperless/consume/foo && cat /usr/src/paperless/consume/foo && rm /usr/src/paperless/consume/foo
              timeoutSeconds: 1

  project: cluster-apps
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
    automated:
      prune: true
      selfHeal: true
